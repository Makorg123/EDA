# -*- coding: utf-8 -*-
"""CNN on fashion_mnist

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fXep-by81KF2UD2SIEu6uBPOvW2_RPJ3
"""

import numpy as np
import pandas as pd
import tensorflow
import matplotlib.pyplot as plt

from keras.datasets import fashion_mnist

(X_train,y_train),(X_test,y_test) = fashion_mnist.load_data()

print(X_train.shape)
print(X_test.shape)

plt.imshow(X_train[20])

plt.figure(figsize=(10,10))
for i in range(25):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i],cmap=plt.cm.binary)
plt.show()

# Reshape the data.
X_train = X_train.reshape(60000,28,28,1)
X_test  = X_test.reshape(10000,28,28,1)

# Convert from 64bit to 32bit
X_train = X_train.astype('float32')
X_test  = X_test.astype('float32')

# Normalize or MinMax Scale Data
X_train = X_train/255
X_test  = X_test/255

# LabelEncode Dependent Variable
y_train = tensorflow.keras.utils.to_categorical(y_train,10)
y_test  = tensorflow.keras.utils.to_categorical(y_test,10)

# Model Building
from keras.models import Sequential
from keras.layers import Conv2D,MaxPool2D,BatchNormalization
from keras.layers import Dense, Flatten, Activation

cnn = Sequential()
cnn.add(Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1),padding="same"))

cnn.add(BatchNormalization())
cnn.add(Conv2D(32,(3,3), activation='relu',padding='same'))
cnn.add(Conv2D(24,(3,3),activation='relu',padding='same'))
cnn.add(Conv2D(64,(3,3),activation='relu',padding='same'))
cnn.add(Conv2D(32,(3,3),activation='relu',padding='same'))
cnn.add(MaxPool2D(pool_size=(2,2)))
cnn.add(Flatten())
cnn.add(Dense(128,activation='relu'))
cnn.add(Dense(10,activation='softmax'))
cnn.compile(optimizer="adam",loss="categorical_crossentropy",metrics=['accuracy'])
cnn.summary()

# Fitting the model.
cnnmodel = cnn.fit(X_train,y_train,epochs=20,batch_size=128,validation_data=(X_test,y_test))

plt.plot(cnnmodel.history['accuracy'],label='accuracy')
plt.plot(cnnmodel.history['val_accuracy'],label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.86,1])
plt.legend()
plt.show()

